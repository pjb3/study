1> c(enumerable).
{ok,enumerable}
2> enumerable:each([1,2,3], (fun(N) -> io:format("~w~n", [N]) end)).
1
2
3
undefined
3> enumerable:collect([1,2,3], (fun(N) -> N *N end)).
[1,4,9]
4> enumerable:select([1,2,3,4,5], (fun(N) -> N > 2 end)).
[3,4,5]
5> enumerable:inject([1,2,3,3,4,5], (fun(Sum, N) -> Sum + N end)).
18
6> enumerable:inject([1,2,3,3,4,5], (fun(Sum, N) -> Sum + N end), 0).
18
7> enumerable:inject([1,2,3,3,4,5], (fun(Sum, N) -> Sum + N end), 2).
20
8> F = (fun(D, N) -> dict:update_counter(N, 1, D) end).
#Fun<erl_eval.12.113037538>
9> dict:to_list(enumerable:inject([1,2,3,1,2,2,1,2,4,1,3], F, dict:new())).
[{3,2},{2,4},{1,4},{4,1}]
10> enumerable:all([1,2,3,4], (fun(N) -> N > 2 end)).
false
11> enumerable:all([1,2,3,4], (fun(N) -> N > 0 end)).
true
12> enumerable:any([1,2,3,4], (fun(N) -> N > 3 end)).
true
13> enumerable:any([1,2,3,4], (fun(N) -> N > 4 end)).
false
14> enumerable:detect(lists:seq(1, 10), (fun(N) -> (N rem 5 == 0) and (N rem 7 == 0) end)).
undefined
15> enumerable:detect(lists:seq(1, 100), (fun(N) -> (N rem 5 == 0) and (N rem 7 == 0) end)). 
true
16> enumerable:each_with_index(["cat", "dog", "wombat"], (fun(E,I) -> io:format("~w: ~s~n", [I, E]) end)).
0: cat
1: dog
2: wombat
undefined
17> enumerable:include(lists:seq(1,10), 42).
false
18> enumerable:include(lists:seq(1,100), 42).
true
