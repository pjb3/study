$ ghci baby.hsGHCi, version 6.10.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer ... linking ... done.
Loading package base ... linking ... done.
[1 of 1] Compiling Main             ( baby.hs, interpreted )
Ok, modules loaded: Main.
*Main> doubleMe 9
18
*Main> doubleMe 8.3
16.6
*Main> :r
[1 of 1] Compiling Main             ( baby.hs, interpreted )
Ok, modules loaded: Main.
*Main> doubleUs 4 9
26
*Main> doubleUs 2.3 34.2
73.0
*Main> doubleUs 28 88 + doubleMe 123
478
*Main> :r
[1 of 1] Compiling Main             ( baby.hs, interpreted )

baby.hs:2:15: Not in scope: `doulbleMe'

baby.hs:2:29: Not in scope: `doulbeMe'
Failed, modules loaded: none.
Prelude> :r
[1 of 1] Compiling Main             ( baby.hs, interpreted )
Ok, modules loaded: Main.
*Main> :r
[1 of 1] Compiling Main             ( baby.hs, interpreted )
Ok, modules loaded: Main.
*Main> doubleSmallNumber 99
198
*Main> doubleSmallNumber 101
101
*Main> :r
[1 of 1] Compiling Main             ( baby.hs, interpreted )
Ok, modules loaded: Main.
*Main> doubleSmallNumber' 101
102
*Main> :r
[1 of 1] Compiling Main             ( baby.hs, interpreted )
Ok, modules loaded: Main.
*Main> conanO'Brien
"It's a-me, Conan O'Brien!"
*Main> let lostNumber = [4,8,15,16,23,48]
*Main> lostNumber
[4,8,15,16,23,48]
*Main> [1,2,3,4] ++ [9,10,11,12]
[1,2,3,4,9,10,11,12]
*Main> "hello" ++ " " ++ "world"
"hello world"
*Main> ['w','o'] ++ ['o','t']
"woot"
*Main> 'A':" SMALL CAT"
"A SMALL CAT"
*Main> 5:[1,2,3,4,5]
[5,1,2,3,4,5]
*Main> 1:2:3:[]
[1,2,3]
*Main> "Steve Buscemi" !! 6
'B'
*Main> [9.4,33.2,96.2,11.2,23.25] !! 1
33.2
*Main> let b = [[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]]  
*Main> b
[[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]]
*Main> b ++ [[1,1,1,1]] 
[[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3],[1,1,1,1]]
*Main> [6,6,6]:b
[[6,6,6],[1,2,3,4],[5,3,3,3],[1,2,2,3,4],[1,2,3]]
*Main> b !! 2
[1,2,2,3,4]
*Main> [3,2,1] > [2,1,0]
True
*Main> [3,2,1] > [2,10,100]
True
*Main> [3,4,2] > [3,4]
True
*Main> [3,4,2] > [2,4]
True
*Main> [3,4,2] == [3,4,2]
True
*Main> head [5, 4, 3, 2, 1]
5
*Main> tail [5, 4, 3, 2, 1]
[4,3,2,1]
*Main> last [5, 4, 3, 2, 1]
1
*Main> init [5, 4, 3, 2, 1]
[5,4,3,2]
*Main> head []
*** Exception: Prelude.head: empty list
*Main> length [5,4,3,2,1]
5
*Main> null [1,2,3]
False
*Main> null []
True
*Main> reverse [5,4,3,2,1]
[1,2,3,4,5]
*Main> take 3 [5,4,3,2,1]
[5,4,3]
*Main> take 1 [3,9,3]
[3]
*Main> take 5 [1,2]
[1,2]
*Main> take 0 [6,6,6]
[]
*Main> drop 3 [8,4,2,1,5,6]
[1,5,6]
*Main> drop 0 [1,2,3,4]
[1,2,3,4]
*Main> drop 100 [1,2,3,4]
[]
*Main> minimum [8,4,2,1,5,6]
1
*Main> maximum [1,9,2,3,4]
9
*Main> sum [5,2,1,6,3,2,5,7]
31
*Main> product [6,2,1,2]
24
*Main> product [1,2,5,6,7,9,2,0]
0
*Main> 4 `elem` [3,4,5,6]
True
*Main> elem 4 [3,4,5,6]
True
*Main> 10 `elem` [3,4,5,6]
False
*Main> [1..20]
[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
*Main> ['a'..'z']
"abcdefghijklmnopqrstuvwxyz"
*Main> ['K'..'Z']
"KLMNOPQRSTUVWXYZ"
*Main> [2,4..20]
[2,4,6,8,10,12,14,16,18,20]
*Main> [3,6..20]
[3,6,9,12,15,18]
*Main> [0.1, 0.3 .. 1]
[0.1,0.3,0.5,0.7,0.8999999999999999,1.0999999999999999]
*Main> take 10 (cycle [1,2,3])
[1,2,3,1,2,3,1,2,3,1]
*Main> take 12 (cycle "LOL ")
"LOL LOL LOL "
*Main> take 10 (repeat 5)
[5,5,5,5,5,5,5,5,5,5]
*Main> [x*2 | x <- [1..10]]
[2,4,6,8,10,12,14,16,18,20]
*Main> [x*2 | x <- [1..10], x*2 >= 12]
[12,14,16,18,20]
*Main> [ x | x <- [50..100], x `mod` 7 == 3]
[52,59,66,73,80,87,94]
*Main> boomBangs xs = [ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]

<interactive>:1:13: parse error on input `='
*Main> boomBangs xs = [ (if x < 10 then "BOOM!" else "BANG!") | x <- xs, odd x]

<interactive>:1:13: parse error on input `='
*Main> odd 5True
*Main> boomBangs xs = [ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x] 

<interactive>:1:13: parse error on input `='
*Main> [ if x < 10 then "BOOM!" else "BANG!" | x <- [1,5,10,15], odd x] ["BOOM!","BOOM!","BANG!"]
*Main> [ if x < 10 then "BOOM!" else "BANG!" | x <- [7..13], odd x]
["BOOM!","BOOM!","BANG!","BANG!"]
*Main> :quit
Leaving GHCi.
pbarry@pbarry-macbook:~/Study/Haskell/LearnYouAHaskell/ch02 $ ghci
GHCi, version 6.10.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer ... linking ... done.
Loading package base ... linking ... done.
Prelude> let boomBangs xs = [ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]   
Prelude> boomBangs [7..13]
["BOOM!","BOOM!","BANG!","BANG!"]
Prelude> [ x | x <- [10..20], x /= 13, x /= 15, x /= 19][10,11,12,14,16,17,18,20]
Prelude> [ x*y | x <- [2,5,10], y <- [8,10,11]]  
[16,20,22,40,50,55,80,100,110]
Prelude> [ x*y | x <- [2,5,10], y <- [8,10,11], x*y > 50]
[55,80,100,110]
Prelude> let nouns = ["hobo","frog","pope"]
Prelude> let adjectives = ["lazy","grouchy","scheming"]
Prelude> [adjective ++ " " ++ noun | adjective <- adjective, noun <- nouns]

<interactive>:1:41: Not in scope: `adjective'
Prelude> [adjective ++ " " ++ noun | adjective <- adjectives, noun <- nouns]
["lazy hobo","lazy frog","lazy pope","grouchy hobo","grouchy frog","grouchy pope","scheming hobo","scheming frog","scheming pope"]
Prelude> let length' xs = sum [1 | _ <- xs]
Prelude> let removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]   
Prelude> removeNonUppercase "Hahaha! Ahahaha!"
"HA"
Prelude> removeNonUppercase "IdontLIKEFROGS"
"ILIKEFROGS"
Prelude> let xxs = [[1,3,5,2,3,1,2,4,5],[1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]] 
Prelude> [ [ x | x <- xs, even x ] | xs <- xxs]
[[2,2,4],[2,4,6,8],[2,4,2,6,2,6]]
Prelude> fst (8,11)
8
Prelude> fst ("Wow", False)
"Wow"
Prelude> fst("Wow", False)
"Wow"
Prelude> snd (8,11)
11
Prelude> snd ("Wow", False)
False
Prelude> zip [1..5] repeat 5

<interactive>:1:11:
    Couldn't match expected type `[b]' against inferred type `a -> [a]'
    In the second argument of `zip', namely `repeat'
    In the expression: zip ([1 .. 5]) repeat 5
    In the definition of `it': it = zip ([1 .. 5]) repeat 5
Prelude> zip [1..5] cycle 5

<interactive>:1:11:
    Couldn't match expected type `[b]'
           against inferred type `[a] -> [a]'
    In the second argument of `zip', namely `cycle'
    In the expression: zip ([1 .. 5]) cycle 5
    In the definition of `it': it = zip ([1 .. 5]) cycle 5
Prelude> zip [1..5] [5..5]
[(1,5)]
Prelude> zip [1..5] [5,5,5,5,5]
[(1,5),(2,5),(3,5),(4,5),(5,5)]
Prelude> zip [1..5] replicate 5 5

<interactive>:1:11:
    Couldn't match expected type `[b]'
           against inferred type `Int -> a -> [a]'
    In the second argument of `zip', namely `replicate'
    In the expression: zip ([1 .. 5]) replicate 5 5
    In the definition of `it': it = zip ([1 .. 5]) replicate 5 5
Prelude> take 42 replicate 5 5

<interactive>:1:8:
    Couldn't match expected type `[a]'
           against inferred type `Int -> a1 -> [a1]'
    In the second argument of `take', namely `replicate'
    In the expression: take 42 replicate 5 5
    In the definition of `it': it = take 42 replicate 5 5
Prelude> take 42 repeat 5

<interactive>:1:8:
    Couldn't match expected type `[a]'
           against inferred type `a1 -> [a1]'
    In the second argument of `take', namely `repeat'
    In the expression: take 42 repeat 5
    In the definition of `it': it = take 42 repeat 5
Prelude> zip [1..5] (repeat 5)
[(1,5),(2,5),(3,5),(4,5),(5,5)]
Prelude> let triangles = [ (a,b,c) | c <- [1..10], b <- [1..10], a <- [1..10]]
Prelude> triangles
[(1,1,1),(2,1,1),(3,1,1),(4,1,1),(5,1,1),(6,1,1),(7,1,1),(8,1,1),(9,1,1),(10,1,1),(1,2,1),(2,2,1),(3,2,1),(4,2,1),(5,2,1),(6,2,1),(7,2,1),(8,2,1),(9,2,1),(10,2,1),(1,3,1),(2,3,1),(3,3,1),(4,3,1),(5,3,1),(6,3,1),(7,3,1),(8,3,1),(9,3,1),(10,3,1),(1,4,1),(2,4,1),(3,4,1),(4,4,1),(5,4,1),(6,4,1),(7,4,1),(8,4,1),(9,4,1),(10,4,1),(1,5,1),(2,5,1),(3,5,1),(4,5,1),(5,5,1),(6,5,1),(7,5,1),(8,5,1),(9,5,1),(10,5,1),(1,6,1),(2,6,1),(3,6,1),(4,6,1),(5,6,1),(6,6,1),(7,6,1),(8,6,1),(9,6,1),(10,6,1),(1,7,1),(2,7,1),(3,7,1),(4,7,1),(5,7,1),(6,7,1),(7,7,1),(8,7,1),(9,7,1),(10,7,1),(1,8,1),(2,8,1),(3,8,1),(4,8,1),(5,8,1),(6,8,1),(7,8,1),(8,8,1),(9,8,1),(10,8,1),(1,9,1),(2,9,1),(3,9,1),(4,9,1),(5,9,1),(6,9,1),(7,9,1),(8,9,1),(9,9,1),(10,9,1),(1,10,1),(2,10,1),(3,10,1),(4,10,1),(5,10,1),(6,10,1),(7,10,1),(8,10,1),(9,10,1),(10,10,1),(1,1,2),(2,1,2),(3,1,2),(4,1,2),(5,1,2),(6,1,2),(7,1,2),(8,1,2),(9,1,2),(10,1,2),(1,2,2),(2,2,2),(3,2,2),(4,2,2),(5,2,2),(6,2,2),(7,2,2),(8,2,2),(9,2,2),(10,2,2),(1,3,2),(2,3,2),(3,3,2),(4,3,2),(5,3,2),(6,3,2),(7,3,2),(8,3,2),(9,3,2),(10,3,2),(1,4,2),(2,4,2),(3,4,2),(4,4,2),(5,4,2),(6,4,2),(7,4,2),(8,4,2),(9,4,2),(10,4,2),(1,5,2),(2,5,2),(3,5,2),(4,5,2),(5,5,2),(6,5,2),(7,5,2),(8,5,2),(9,5,2),(10,5,2),(1,6,2),(2,6,2),(3,6,2),(4,6,2),(5,6,2),(6,6,2),(7,6,2),(8,6,2),(9,6,2),(10,6,2),(1,7,2),(2,7,2),(3,7,2),(4,7,2),(5,7,2),(6,7,2),(7,7,2),(8,7,2),(9,7,2),(10,7,2),(1,8,2),(2,8,2),(3,8,2),(4,8,2),(5,8,2),(6,8,2),(7,8,2),(8,8,2),(9,8,2),(10,8,2),(1,9,2),(2,9,2),(3,9,2),(4,9,2),(5,9,2),(6,9,2),(7,9,2),(8,9,2),(9,9,2),(10,9,2),(1,10,2),(2,10,2),(3,10,2),(4,10,2),(5,10,2),(6,10,2),(7,10,2),(8,10,2),(9,10,2),(10,10,2),(1,1,3),(2,1,3),(3,1,3),(4,1,3),(5,1,3),(6,1,3),(7,1,3),(8,1,3),(9,1,3),(10,1,3),(1,2,3),(2,2,3),(3,2,3),(4,2,3),(5,2,3),(6,2,3),(7,2,3),(8,2,3),(9,2,3),(10,2,3),(1,3,3),(2,3,3),(3,3,3),(4,3,3),(5,3,3),(6,3,3),(7,3,3),(8,3,3),(9,3,3),(10,3,3),(1,4,3),(2,4,3),(3,4,3),(4,4,3),(5,4,3),(6,4,3),(7,4,3),(8,4,3),(9,4,3),(10,4,3),(1,5,3),(2,5,3),(3,5,3),(4,5,3),(5,5,3),(6,5,3),(7,5,3),(8,5,3),(9,5,3),(10,5,3),(1,6,3),(2,6,3),(3,6,3),(4,6,3),(5,6,3),(6,6,3),(7,6,3),(8,6,3),(9,6,3),(10,6,3),(1,7,3),(2,7,3),(3,7,3),(4,7,3),(5,7,3),(6,7,3),(7,7,3),(8,7,3),(9,7,3),(10,7,3),(1,8,3),(2,8,3),(3,8,3),(4,8,3),(5,8,3),(6,8,3),(7,8,3),(8,8,3),(9,8,3),(10,8,3),(1,9,3),(2,9,3),(3,9,3),(4,9,3),(5,9,3),(6,9,3),(7,9,3),(8,9,3),(9,9,3),(10,9,3),(1,10,3),(2,10,3),(3,10,3),(4,10,3),(5,10,3),(6,10,3),(7,10,3),(8,10,3),(9,10,3),(10,10,3),(1,1,4),(2,1,4),(3,1,4),(4,1,4),(5,1,4),(6,1,4),(7,1,4),(8,1,4),(9,1,4),(10,1,4),(1,2,4),(2,2,4),(3,2,4),(4,2,4),(5,2,4),(6,2,4),(7,2,4),(8,2,4),(9,2,4),(10,2,4),(1,3,4),(2,3,4),(3,3,4),(4,3,4),(5,3,4),(6,3,4),(7,3,4),(8,3,4),(9,3,4),(10,3,4),(1,4,4),(2,4,4),(3,4,4),(4,4,4),(5,4,4),(6,4,4),(7,4,4),(8,4,4),(9,4,4),(10,4,4),(1,5,4),(2,5,4),(3,5,4),(4,5,4),(5,5,4),(6,5,4),(7,5,4),(8,5,4),(9,5,4),(10,5,4),(1,6,4),(2,6,4),(3,6,4),(4,6,4),(5,6,4),(6,6,4),(7,6,4),(8,6,4),(9,6,4),(10,6,4),(1,7,4),(2,7,4),(3,7,4),(4,7,4),(5,7,4),(6,7,4),(7,7,4),(8,7,4),(9,7,4),(10,7,4),(1,8,4),(2,8,4),(3,8,4),(4,8,4),(5,8,4),(6,8,4),(7,8,4),(8,8,4),(9,8,4),(10,8,4),(1,9,4),(2,9,4),(3,9,4),(4,9,4),(5,9,4),(6,9,4),(7,9,4),(8,9,4),(9,9,4),(10,9,4),(1,10,4),(2,10,4),(3,10,4),(4,10,4),(5,10,4),(6,10,4),(7,10,4),(8,10,4),(9,10,4),(10,10,4),(1,1,5),(2,1,5),(3,1,5),(4,1,5),(5,1,5),(6,1,5),(7,1,5),(8,1,5),(9,1,5),(10,1,5),(1,2,5),(2,2,5),(3,2,5),(4,2,5),(5,2,5),(6,2,5),(7,2,5),(8,2,5),(9,2,5),(10,2,5),(1,3,5),(2,3,5),(3,3,5),(4,3,5),(5,3,5),(6,3,5),(7,3,5),(8,3,5),(9,3,5),(10,3,5),(1,4,5),(2,4,5),(3,4,5),(4,4,5),(5,4,5),(6,4,5),(7,4,5),(8,4,5),(9,4,5),(10,4,5),(1,5,5),(2,5,5),(3,5,5),(4,5,5),(5,5,5),(6,5,5),(7,5,5),(8,5,5),(9,5,5),(10,5,5),(1,6,5),(2,6,5),(3,6,5),(4,6,5),(5,6,5),(6,6,5),(7,6,5),(8,6,5),(9,6,5),(10,6,5),(1,7,5),(2,7,5),(3,7,5),(4,7,5),(5,7,5),(6,7,5),(7,7,5),(8,7,5),(9,7,5),(10,7,5),(1,8,5),(2,8,5),(3,8,5),(4,8,5),(5,8,5),(6,8,5),(7,8,5),(8,8,5),(9,8,5),(10,8,5),(1,9,5),(2,9,5),(3,9,5),(4,9,5),(5,9,5),(6,9,5),(7,9,5),(8,9,5),(9,9,5),(10,9,5),(1,10,5),(2,10,5),(3,10,5),(4,10,5),(5,10,5),(6,10,5),(7,10,5),(8,10,5),(9,10,5),(10,10,5),(1,1,6),(2,1,6),(3,1,6),(4,1,6),(5,1,6),(6,1,6),(7,1,6),(8,1,6),(9,1,6),(10,1,6),(1,2,6),(2,2,6),(3,2,6),(4,2,6),(5,2,6),(6,2,6),(7,2,6),(8,2,6),(9,2,6),(10,2,6),(1,3,6),(2,3,6),(3,3,6),(4,3,6),(5,3,6),(6,3,6),(7,3,6),(8,3,6),(9,3,6),(10,3,6),(1,4,6),(2,4,6),(3,4,6),(4,4,6),(5,4,6),(6,4,6),(7,4,6),(8,4,6),(9,4,6),(10,4,6),(1,5,6),(2,5,6),(3,5,6),(4,5,6),(5,5,6),(6,5,6),(7,5,6),(8,5,6),(9,5,6),(10,5,6),(1,6,6),(2,6,6),(3,6,6),(4,6,6),(5,6,6),(6,6,6),(7,6,6),(8,6,6),(9,6,6),(10,6,6),(1,7,6),(2,7,6),(3,7,6),(4,7,6),(5,7,6),(6,7,6),(7,7,6),(8,7,6),(9,7,6),(10,7,6),(1,8,6),(2,8,6),(3,8,6),(4,8,6),(5,8,6),(6,8,6),(7,8,6),(8,8,6),(9,8,6),(10,8,6),(1,9,6),(2,9,6),(3,9,6),(4,9,6),(5,9,6),(6,9,6),(7,9,6),(8,9,6),(9,9,6),(10,9,6),(1,10,6),(2,10,6),(3,10,6),(4,10,6),(5,10,6),(6,10,6),(7,10,6),(8,10,6),(9,10,6),(10,10,6),(1,1,7),(2,1,7),(3,1,7),(4,1,7),(5,1,7),(6,1,7),(7,1,7),(8,1,7),(9,1,7),(10,1,7),(1,2,7),(2,2,7),(3,2,7),(4,2,7),(5,2,7),(6,2,7),(7,2,7),(8,2,7),(9,2,7),(10,2,7),(1,3,7),(2,3,7),(3,3,7),(4,3,7),(5,3,7),(6,3,7),(7,3,7),(8,3,7),(9,3,7),(10,3,7),(1,4,7),(2,4,7),(3,4,7),(4,4,7),(5,4,7),(6,4,7),(7,4,7),(8,4,7),(9,4,7),(10,4,7),(1,5,7),(2,5,7),(3,5,7),(4,5,7),(5,5,7),(6,5,7),(7,5,7),(8,5,7),(9,5,7),(10,5,7),(1,6,7),(2,6,7),(3,6,7),(4,6,7),(5,6,7),(6,6,7),(7,6,7),(8,6,7),(9,6,7),(10,6,7),(1,7,7),(2,7,7),(3,7,7),(4,7,7),(5,7,7),(6,7,7),(7,7,7),(8,7,7),(9,7,7),(10,7,7),(1,8,7),(2,8,7),(3,8,7),(4,8,7),(5,8,7),(6,8,7),(7,8,7),(8,8,7),(9,8,7),(10,8,7),(1,9,7),(2,9,7),(3,9,7),(4,9,7),(5,9,7),(6,9,7),(7,9,7),(8,9,7),(9,9,7),(10,9,7),(1,10,7),(2,10,7),(3,10,7),(4,10,7),(5,10,7),(6,10,7),(7,10,7),(8,10,7),(9,10,7),(10,10,7),(1,1,8),(2,1,8),(3,1,8),(4,1,8),(5,1,8),(6,1,8),(7,1,8),(8,1,8),(9,1,8),(10,1,8),(1,2,8),(2,2,8),(3,2,8),(4,2,8),(5,2,8),(6,2,8),(7,2,8),(8,2,8),(9,2,8),(10,2,8),(1,3,8),(2,3,8),(3,3,8),(4,3,8),(5,3,8),(6,3,8),(7,3,8),(8,3,8),(9,3,8),(10,3,8),(1,4,8),(2,4,8),(3,4,8),(4,4,8),(5,4,8),(6,4,8),(7,4,8),(8,4,8),(9,4,8),(10,4,8),(1,5,8),(2,5,8),(3,5,8),(4,5,8),(5,5,8),(6,5,8),(7,5,8),(8,5,8),(9,5,8),(10,5,8),(1,6,8),(2,6,8),(3,6,8),(4,6,8),(5,6,8),(6,6,8),(7,6,8),(8,6,8),(9,6,8),(10,6,8),(1,7,8),(2,7,8),(3,7,8),(4,7,8),(5,7,8),(6,7,8),(7,7,8),(8,7,8),(9,7,8),(10,7,8),(1,8,8),(2,8,8),(3,8,8),(4,8,8),(5,8,8),(6,8,8),(7,8,8),(8,8,8),(9,8,8),(10,8,8),(1,9,8),(2,9,8),(3,9,8),(4,9,8),(5,9,8),(6,9,8),(7,9,8),(8,9,8),(9,9,8),(10,9,8),(1,10,8),(2,10,8),(3,10,8),(4,10,8),(5,10,8),(6,10,8),(7,10,8),(8,10,8),(9,10,8),(10,10,8),(1,1,9),(2,1,9),(3,1,9),(4,1,9),(5,1,9),(6,1,9),(7,1,9),(8,1,9),(9,1,9),(10,1,9),(1,2,9),(2,2,9),(3,2,9),(4,2,9),(5,2,9),(6,2,9),(7,2,9),(8,2,9),(9,2,9),(10,2,9),(1,3,9),(2,3,9),(3,3,9),(4,3,9),(5,3,9),(6,3,9),(7,3,9),(8,3,9),(9,3,9),(10,3,9),(1,4,9),(2,4,9),(3,4,9),(4,4,9),(5,4,9),(6,4,9),(7,4,9),(8,4,9),(9,4,9),(10,4,9),(1,5,9),(2,5,9),(3,5,9),(4,5,9),(5,5,9),(6,5,9),(7,5,9),(8,5,9),(9,5,9),(10,5,9),(1,6,9),(2,6,9),(3,6,9),(4,6,9),(5,6,9),(6,6,9),(7,6,9),(8,6,9),(9,6,9),(10,6,9),(1,7,9),(2,7,9),(3,7,9),(4,7,9),(5,7,9),(6,7,9),(7,7,9),(8,7,9),(9,7,9),(10,7,9),(1,8,9),(2,8,9),(3,8,9),(4,8,9),(5,8,9),(6,8,9),(7,8,9),(8,8,9),(9,8,9),(10,8,9),(1,9,9),(2,9,9),(3,9,9),(4,9,9),(5,9,9),(6,9,9),(7,9,9),(8,9,9),(9,9,9),(10,9,9),(1,10,9),(2,10,9),(3,10,9),(4,10,9),(5,10,9),(6,10,9),(7,10,9),(8,10,9),(9,10,9),(10,10,9),(1,1,10),(2,1,10),(3,1,10),(4,1,10),(5,1,10),(6,1,10),(7,1,10),(8,1,10),(9,1,10),(10,1,10),(1,2,10),(2,2,10),(3,2,10),(4,2,10),(5,2,10),(6,2,10),(7,2,10),(8,2,10),(9,2,10),(10,2,10),(1,3,10),(2,3,10),(3,3,10),(4,3,10),(5,3,10),(6,3,10),(7,3,10),(8,3,10),(9,3,10),(10,3,10),(1,4,10),(2,4,10),(3,4,10),(4,4,10),(5,4,10),(6,4,10),(7,4,10),(8,4,10),(9,4,10),(10,4,10),(1,5,10),(2,5,10),(3,5,10),(4,5,10),(5,5,10),(6,5,10),(7,5,10),(8,5,10),(9,5,10),(10,5,10),(1,6,10),(2,6,10),(3,6,10),(4,6,10),(5,6,10),(6,6,10),(7,6,10),(8,6,10),(9,6,10),(10,6,10),(1,7,10),(2,7,10),(3,7,10),(4,7,10),(5,7,10),(6,7,10),(7,7,10),(8,7,10),(9,7,10),(10,7,10),(1,8,10),(2,8,10),(3,8,10),(4,8,10),(5,8,10),(6,8,10),(7,8,10),(8,8,10),(9,8,10),(10,8,10),(1,9,10),(2,9,10),(3,9,10),(4,9,10),(5,9,10),(6,9,10),(7,9,10),(8,9,10),(9,9,10),(10,9,10),(1,10,10),(2,10,10),(3,10,10),(4,10,10),(5,10,10),(6,10,10),(7,10,10),(8,10,10),(9,10,10),(10,10,10)]
Prelude> let rightTriangles = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2]   
Prelude> rightTriangles
[(3,4,5),(6,8,10)]
Prelude> let rightTriangles' = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2, a+b+c == 24]  
Prelude> rightTriangles'
[(6,8,10)]