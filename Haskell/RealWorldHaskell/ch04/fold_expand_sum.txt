foldl :: (a -> b -> a) -> a -> [b] -> a

foldl step acc (x:xs) = foldl step (step acc x) xs
foldl _    acc []     = acc

foldl plus 0 [1..3]
foldl plus (plus 0 1) [2,3]
foldl plus (plus (plus 0 1) 2) [3]
foldl plus (plus (plus (plus 0 1) 2) 3) []
(plus (plus (plus 0 1) 2) 3)
(plus (plus 1 2) 3)
(plus 3 3)
6

foldr :: (a -> b -> b) -> b -> [a] -> b

foldr step acc (x:xs) = step x (foldr step acc xs)
foldr _    acc []     = acc

foldr plus 0 [1..3]
plus 1 (foldr plus 0 [2,3])
plus 1 (plus 2 (foldr plus 0 [3]))
plus 1 (plus 2 (plus 3 (foldr plus 0 [])))
plus 1 (plus 2 (plus 3 0))
plus 1 (plus 2 3)
plus 1 5
6